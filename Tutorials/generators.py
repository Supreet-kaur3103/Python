#Generators are a type of iterable, like lists or tuples. 
#Unlike lists, they don't allow indexing with arbitrary indices, but they can still be iterated through with for loops. 
#They can be created using functions and the yield statement.
# Defining a generator function called countdown.
def countdown():
    i = 5
    while i > 0:
        yield i
        i -= 1

# Iterating over the values yielded by the countdown generator using a for loop.
# Each iteration, the next value from the generator is retrieved and assigned to the variable i.
for i in countdown():
    # Printing the current value of i.
    print(i)

#The yield statement is used to define a generator, replacing the return of a function to provide a result to its caller without destroying local variables.

print("**********************************")
# Defining a generator function called infinite_sevens.
def infinite_sevens():
    # Entering an infinite loop using while True.
    while True:
        # Yielding the value 7 in each iteration of the loop.
        yield 7

# Iterating over the values yielded by the infinite_sevens generator using a for loop.
# Since the generator is infinite, this loop will continue indefinitely.
# Each iteration, the next value from the generator is retrieved and assigned to the variable i.
for i in infinite_sevens():
    # Printing the current value of i.
    print(i)
#Due to the fact that they yield one item at a time, generators don't have the memory restrictions of lists. 
#In fact, they can be infinite!


print("***************************************")
#Using generators results in improved performance, which is the result of the lazy (on demand) generation of values, which translates to lower memory usage. Furthermore, we do not need to wait until all the elements have been generated before we start to use them.

print("********************************************")
def isPrime(x):
    # Check if x is less than 2, as prime numbers start from 2.
    if x < 2:
        return False
    # Handle the special case when x is 2, which is a prime number.
    elif x == 2:
        return True
    # Iterate from 2 to x-1 and check for divisibility.
    for n in range(2, x):
        # If x is divisible by any number in the range, it's not prime.
        if x % n == 0:
            return False
    # If none of the numbers in the range divided x, it's a prime number.
    return True

def primeGenerator(a, b):
    # Generate prime numbers in the range [a, b).
    for i in range(a, b):
        # Check if the current number i is prime using the isPrime function.
        if isPrime(i):
            # Yield the current prime number i.
            yield i

# Read input for the starting and ending values of the range.
f = int(input())
t = int(input())

# Print a list of prime numbers generated by the primeGenerator function in the range [f, t).
print(list(primeGenerator(f, t)))

